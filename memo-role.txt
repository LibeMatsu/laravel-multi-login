◆ SpatieのLaravel-Permissionパッケージを使用
composer require spatie/laravel-permission

※ 設定
php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
php artisan migrate





【 ロールと権限のシステムを実装 】

◆ ロールと権限のテーブルを作成するためのマイグレーションを作成
php artisan make:migration create_roles_and_permissions_tables



※ database/migrations/xxxx_xx_xx_create_roles_and_permissions_tables.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateRolesAndPermissionsTables extends Migration
{
    public function up()
    {
        Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('slug')->unique();
            $table->timestamps();
        });

        Schema::create('permissions', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('slug')->unique();
            $table->timestamps();
        });

        Schema::create('role_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('role_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });

        Schema::create('permission_role', function (Blueprint $table) {
            $table->id();
            $table->foreignId('permission_id')->constrained()->onDelete('cascade');
            $table->foreignId('role_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('permission_role');
        Schema::dropIfExists('role_user');
        Schema::dropIfExists('permissions');
        Schema::dropIfExists('roles');
    }
}




◆ モデルを作成
php artisan make:model Role
php artisan make:model Permission


※ app/Models/Role.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Role extends Model
{
    use HasFactory;

    protected $fillable = ['name', 'slug'];

    public function permissions()
    {
        return $this->belongsToMany(Permission::class);
    }

    public function users()
    {
        return $this->belongsToMany(User::class);
    }
}


※ app/Models/Permission.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Permission extends Model
{
    use HasFactory;

    protected $fillable = ['name', 'slug'];

    public function roles()
    {
        return $this->belongsToMany(Role::class);
    }
}



◆ ユーザーモデルの編集

※ app/Models/User.php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use Notifiable;

    public function roles()
    {
        return $this->belongsToMany(Role::class);
    }

    public function hasRole($role)
    {
        return $this->roles()->where('slug', $role)->exists();
    }
}



◆ ロールと権限の割り当て

use App\Models\Role;
use App\Models\Permission;
use App\Models\User;

// ロールの作成
$adminRole = Role::create(['name' => 'Administrator', 'slug' => 'administrator']);

// 権限の作成
$manageUsers = Permission::create(['name' => 'Manage Users', 'slug' => 'manage-users']);

// ロールに権限を割り当て
$adminRole->permissions()->attach($manageUsers);

// ユーザーにロールを割り当て
$user = User::find(1); // 1はユーザーID
$user->roles()->attach($adminRole);








【 ロールと権限の割り当て 】


1. admin_roles テーブル

**役割（ロール）**を管理するテーブル


例）administratorというロールを作成
use Encore\Admin\Auth\Database\Role;

$adminRole = Role::firstOrCreate([
    'name' => 'administrator',
    'slug' => 'administrator',
]);


※ Role::firstOrCreate ←指定した条件に一致するレコードが存在しない場合に新しいレコードを作成するメソッド
※ 同じロールが複数回作成されることを防ぐ
・存在する場合: 条件に一致する既存のレコードを返す
・存在しない場合: 新しいレコードを作成し、それを返す

※ slugは、データベース内で一意の識別子
（nameは一意でなくてもよい。人間が読みやすい表示用の名前。）
・一意性: slugは一意である必要があるため、データベース内で重複しないように管理できる
・URLフレンドリー: slugはURLに使いやすい形式であるため、SEO（検索エンジン最適化）にも役立つ
・簡潔さ: slugは短くて覚えやすい文字列なので、プログラム内で扱いやすい




2. admin_permissions テーブル

権限を管理するテーブル


例）dashboardやusersなどの権限を作成
use Encore\Admin\Auth\Database\Permission;

$permissions = [
    'dashboard', 
    'users', 
    'categories', 
    'products', 
    'major-categories', 
    'shopping-carts'
    ];

foreach ($permissions as $permission) {
    Permission::firstOrCreate([
        'name' => $permission,
        'slug' => $permission,
    ]);
}




3. admin_role_permissions テーブル

ロールと権限の関連付けを管理するテーブル
ロールに対して権限を割り当てる
（ロールと権限の関係を管理するための中間テーブル）


例）admin_rolesテーブルとadmin_permissionsテーブルの橋渡しをする

admin_rolesテーブル:
id: 1, name: 'administrator'
id: 2, name: 'editor'

admin_permissionsテーブル:
id: 1, name: 'dashboard'
id: 2, name: 'users'
id: 3, name: 'categories'

admin_role_permissionsテーブル
role_id | permission_id
--------|---------------
1       | 1
1       | 2
1       | 3
2       | 1
2       | 3


例）
foreach ($permissions as $permission) {
    $perm = Permission::where('name', $permission)->first();
    $adminRole->permissions()->save($perm);
}




4. admin_users テーブル

ユーザーを管理するテーブル

例）adminというユーザーを作成
use Encore\Admin\Auth\Database\Administrator;

$adminUser = Administrator::firstOrCreate([
    'username' => 'admin',
    'password' => Hash::make('password'),
    'name'     => 'Administrator',
]);




5. admin_role_users テーブル

ユーザーとロールの関連付けを管理するテーブル
ユーザーに対してロールを割り当てる

$adminUser->roles()->save($adminRole);




※ 例）AdminUserSeeder.php

<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Auth\Database\Role;
use Encore\Admin\Auth\Database\Permission;
use Illuminate\Support\Facades\Hash;

class AdminUserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // ユーザーがすでに存在するか確認（これにより重複エラーを防ぐ）
        $user = Administrator::firstOrNew(
            [
                'username' => 'admin',
                'password' => Hash::make('password'),
                'name'     => 'Administrator',
            ]
        );

        // ユーザーが存在しない場合のみ新規作成
        if (!$user->exists) {
            $user->save();
        }

        // 管理者ロールが存在しない場合、作成
        $role = Role::firstOrCreate(
            ['name' => 'administrator'],
            ['slug' => 'Administrator']
        );

        // 既存のadminユーザーを取得
        $adminUser = Administrator::where('username', 'admin')->first();

        // 管理者ロールを割り当て
        $adminRole = Role::where('name', 'administrator')->first();
        $adminUser->roles()->save($adminRole);

    }
}



※ Role::firstOrCreate← 指定した条件に一致するロールが存在するか確認し、存在しない場合は新しいロールを作成するメソッド





まとめ

ロールの作成: admin_roles テーブルにロールを作成。

権限の作成: admin_permissions テーブルに権限を作成。

ロールと権限の関連付け: admin_role_permissions テーブルにロールと権限を関連付け。

ユーザーの作成: admin_users テーブルにユーザーを作成。

ユーザーとロールの関連付け: admin_role_users テーブルにユーザーとロールを関連付け。

