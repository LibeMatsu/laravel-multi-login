◆ app/config/auth.phpで設定

Authentication Guardsの所に
それぞれにguardを指定する



Providersのところ

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],

        'owners' => [
            'driver' => 'eloquent',
            'model' => App\Models\Owner::class,
        ],

        'admin' => [
            'driver' => 'eloquent',
            'model' => App\Models\Admin::class,
        ],
    ],
みたいなかんじ




Resetting Passwordsのところ

    'passwords' => [
        'users' => [
            'provider' => 'users', // ↑で設定したProvider
            'table' => 'password_reset_tokens',
            //  ↓期限。60日間。
            'expire' => 60,
            //  ↓ログインを何回か失敗したときに60秒使えなくする
            'throttle' => 60,
        ],

        'owners' => [
            'provider' => 'owners',
            'table' => '自分で設定したパスワードリセット用テーブルの名前',
            'expire' => 60,
            'throttle' => 60,
        ],

        'admin' => [
            'provider' => 'admin',
            'table' => '自分で設定したパスワードリセット用テーブルの名前',
            'expire' => 60,
            'throttle' => 60,
        ],
    ],
こんな感じ




◆ App\Http\Requests\Auth\LoginRequest.php

ログイン時にGuardをかけるのに設定


    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if($this->routeIs('owner.*')) {
            $guard = 'owners';
        } elseif ($this->routeIs('admin.*')) {
            $guard = 'admin';
        } else {
            $guard = 'users';
        }

        // ↑ owners, admin, usersは、config\auth.phpで設定しているguardsの値 ↑


        if (! Auth::guard($guard)->attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

